
volumes:
  openwebui_data: {}
  postgres_data: {}
  redis_data: {}
  mongo_data: {}
  minio_data: {}
  es_data: {}
  pgadmin_data: {}
  n8n_data: {}
  gitea_data: {}
  codium_data: {}
  supabase_studio_data: {}
  weaviate_data: {}
  nginx_data: {}
  penpot_postgres_data: {}
  penpot_assets_data: {}

networks:
  kos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1 # Defining a gateway for trusted proxy access

services:
  nginx:
    image: nginx:1.27.0-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./healthcheck.html:/usr/share/nginx/html/healthcheck.html
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f -H 'Host: health.localhost' http://127.0.0.1/healthcheck.html | grep -q 200 || exit 1"]
      interval: 30s
    networks:
      - kos-network
    depends_on:
      - penpot-frontend
      - pgadmin

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    restart: unless-stopped
    volumes:
      - openwebui_data:/app/backend/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
    networks:
      - kos-network

  postgres:
    image: postgres:16.3-alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init/init-all-dbs.sh:/docker-entrypoint-initdb.d/init-all-dbs.sh
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PENPOT_DB_PASSWORD=${PENPOT_DB_PASSWORD}
      - N8N_DB_PASSWORD=${N8N_DB_PASSWORD}
      - GITEA_DB_PASSWORD=${GITEA_DB_PASSWORD}
      - SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - LANG=C.UTF-8
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
    command: postgres
    networks:
      - kos-network

  redis:
    image: redis:7.2.5-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
    networks:
      - kos-network

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - kos-network
    depends_on:
      - redis

  pgadmin:
    image: dpage/pgadmin4:8.8
    container_name: pgadmin
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json:ro
    environment:
      - PGADMIN_DEFAULT_EMAIL=${ADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${ADMIN_PASSWORD}
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_CONFIG_MAX_LOGIN_ATTEMPTS=10
      - PGADMIN_CONFIG_USER_INACTIVITY_TIMEOUT=300
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 30s
      retries: 10
    networks:
      - kos-network
    depends_on:
      postgres:
        condition: service_healthy

  mongo:
    image: mongo:7.0.12
    container_name: mongo
    restart: unless-stopped
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.hello()", "--quiet"]
      interval: 30s
    networks:
      - kos-network

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${ADMIN_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ADMIN_PASSWORD}
    networks:
      - kos-network
    depends_on:
      mongo:
        condition: service_healthy

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    container_name: minio
    restart: unless-stopped
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9091"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
    networks:
      - kos-network

  weaviate:
    image: semitechnologies/weaviate:1.25.4
    container_name: weaviate
    restart: unless-stopped
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - CLUSTER_HOSTNAME=node1
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
    networks:
      - kos-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
    networks:
      - kos-network

  n8n:
    image: n8nio/n8n:1.46.0
    container_name: n8n
    restart: on-failure
    volumes:
      - n8n_data:/home/node/.n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${ADMIN_USER}
      - N8N_BASIC_AUTH_PASSWORD=${ADMIN_PASSWORD}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD}
      - N8N_URL=http://n8n.localhost
      - N8N_EDITOR_BASE_URL=http://n8n.localhost
      - N8N_PUBLIC_URL=http://n8n.localhost
      - N8N_SECURE_COOKIE=false
    networks:
      - kos-network
    depends_on:
      postgres:
        condition: service_healthy

  codium:
    image: codercom/code-server:4.91.1
    container_name: codium
    restart: unless-stopped
    user: root
    volumes:
      - codium_data:/home/coder
    environment:
      - PASSWORD=${ADMIN_PASSWORD}
    networks:
      - kos-network

  supabase-studio:
    image: supabase/studio:latest
    container_name: supabase-studio
    restart: unless-stopped
    volumes:
      - supabase_studio_data:/root/.supabase
    environment:
      - SUPABASE_URL=http://supabase.localhost
      - SUPABASE_REST_URL=http://supabase.localhost
      - SUPABASE_DB_HOST=postgres
      - SUPABASE_DB_USER=supabase
      - SUPABASE_DB_PASSWORD=${SUPABASE_DB_PASSWORD}
      - SUPABASE_DB_PORT=5432
      - SUPABASE_DB_NAME=postgres
      - STUDIO_PG_META_URL=http://supabase.localhost
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - kos-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  gitea:
    image: gitea/gitea:1.22.1
    container_name: gitea
    restart: unless-stopped
    ports:
      - "2222:22"
    volumes:
      - gitea_data:/data
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}
      - GITEA__server__ROOT_URL=http://gitea.localhost
      - GITEA__server__SSH_PORT=2222
      - GITEA__server__SSH_LISTEN_PORT=22
    networks:
      - kos-network
    depends_on:
      postgres:
        condition: service_healthy

  penpot-backend:
    image: penpotapp/backend:2.0.3
    container_name: penpot-backend
    restart: on-failure
    volumes:
      - penpot_assets_data:/opt/data
    environment:
      - PENPOT_SECRET_KEY=${PENPOT_SECRET_KEY}
      - PENPOT_DATABASE_URI=postgresql://postgres/penpot
      - PENPOT_DATABASE_USERNAME=penpot
      - PENPOT_DATABASE_PASSWORD=${PENPOT_DB_PASSWORD}
      - PENPOT_REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/1
      - PENPOT_TELEMETRY_ENABLED=false
      - PENPOT_FLAGS=disable-telemetry enable-login-with-password enable-registration enable-log-invitation-tokens disable-email-verification
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6060/api/rpc/command/get-profile"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kos-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  penpot-frontend:
    image: penpotapp/frontend:2.0.3
    container_name: penpot-frontend
    restart: unless-stopped
    environment:
      - PENPOT_FLAGS=disable-telemetry enable-login-with-password enable-registration enable-log-invitation-tokens disable-email-verification
      - PENPOT_BACKEND_URI=http://penpot-backend:6060
      - PENPOT_EXPORTER_URI=http://penpot-exporter:6061
      - PENPOT_PUBLIC_URI=http://penpot.localhost
    depends_on:
      - penpot-backend
    networks:
      - kos-network

  penpot-exporter:
    image: penpotapp/exporter:2.0.3
    container_name: penpot-exporter
    restart: unless-stopped
    environment:
      - PENPOT_FLAGS=disable-telemetry enable-login-with-password disable-registration
      - PENPOT_REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/1
      - PENPOT_BACKEND_URI=http://penpot-backend:6060
    depends_on:
      - penpot-backend
    networks:
      - kos-network